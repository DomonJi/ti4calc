import Head from 'next/head'
import React, { ChangeEvent, useState } from 'react'
import styled from 'styled-components'
import getBattleReport, { BattleReport } from '../core'
import { Participant } from '../core/battle-types'
import {
  BattleEffect,
  getAllBattleEffects,
  isBattleEffectRelevant,
} from '../core/battleeffect/battleEffects'
import { getUnitUpgrade } from '../core/battleeffect/unitUpgrades'
import { createParticipant } from '../core/battleSetup'
import { Place, Race } from '../core/enums'
import { UnitType } from '../core/unit'
import SwitchButton from '../component/switchButton'

const NUMBER_OF_ROLLS = undefined

// TODO input field should revert to zero when you empty them
// TODO shit input should revert to earlier number i guess

const StyledMain = styled.main`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;

  > * {
    width: 400px;
  }
`

const StyledDiv = styled.div`
  display: flex;
  flex-direction: column;

  > * {
  }
`

const BattleReportDiv = styled.div`
  display: flex;

  > * {
    flex: 1 0 0;
  }
`

export default function Home() {
  const [attacker, setAttacker] = useState<Participant>(createParticipant('attacker'))
  const [defender, setDefender] = useState<Participant>(createParticipant('defender'))
  const [battleReport, setBattleReport] = useState<BattleReport>()
  const [spaceCombat, setSpaceCombat] = useState(true)

  const launch = () => {
    // TODO perhaps do this in a service thread?
    // const timer = startDebugTimer('simulate')
    const br = getBattleReport(
      attacker,
      defender,
      spaceCombat ? Place.space : Place.ground,
      NUMBER_OF_ROLLS,
    )
    setBattleReport(br)
    // timer.end()
  }

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <StyledMain>
        <h1>ti4 calc</h1>
        <div style={{ display: 'flex', flexDirection: 'column' }}>
          <div style={{ display: 'flex' }}>
            <ParticipantView participant={attacker} onChange={setAttacker} />
            <StyledDiv>
              <div>race</div>
              <div>flagship</div>
              <div>warsun</div>
              <div>dreadnought</div>
              <div>carrier</div>
              <div>cruiser</div>
              <div>destroyer</div>
              <div>fighter</div>
              <div>mech</div>
              <div>infantry</div>
              <div>pds</div>
            </StyledDiv>
            <ParticipantView participant={defender} onChange={setDefender} />
          </div>
          <div
            style={{
              display: 'flex',
              alignItems: 'center',
              flexDirection: 'column',
              padding: '20px',
            }}
          >
            <div>
              <SwitchButton
                isLeftSelected={spaceCombat}
                onLeftClick={() => setSpaceCombat(true)}
                onRightClick={() => setSpaceCombat(false)}
              />
            </div>
          </div>
          <OptionsView
            attacker={attacker}
            attackerOnChange={setAttacker}
            defender={defender}
            defenderOnChange={setDefender}
          />
        </div>
        <button onClick={launch}>roll</button>
        {battleReport && (
          <BattleReportDiv>
            <div>{battleReport.attacker}</div>
            <div>{battleReport.draw}</div>
            <div>{battleReport.defender}</div>
          </BattleReportDiv>
        )}
      </StyledMain>
    </div>
  )
}

interface ParticipantProps {
  participant: Participant
  onChange: (participant: Participant) => void
}

function ParticipantView({ participant, onChange }: ParticipantProps) {
  return (
    <StyledDiv>
      <select
        onChange={(e) => {
          const race = e.target.value as Race
          const newParticipant: Participant = {
            ...participant,
            race,
          }
          onChange(newParticipant)
        }}
        value={participant.race}
      >
        {Object.values(Race).map((race) => {
          return (
            <option key={race} value={race}>
              {race}
            </option>
          )
        })}
      </select>
      <UnitInput participant={participant} unitType={UnitType.flagship} onUpdate={onChange} />
      <UnitInput participant={participant} unitType={UnitType.warsun} onUpdate={onChange} />
      <UnitInput participant={participant} unitType={UnitType.dreadnought} onUpdate={onChange} />
      <UnitInput participant={participant} unitType={UnitType.carrier} onUpdate={onChange} />
      <UnitInput participant={participant} unitType={UnitType.cruiser} onUpdate={onChange} />
      <UnitInput participant={participant} unitType={UnitType.destroyer} onUpdate={onChange} />
      <UnitInput participant={participant} unitType={UnitType.fighter} onUpdate={onChange} />
      <UnitInput participant={participant} unitType={UnitType.mech} onUpdate={onChange} />
      <UnitInput participant={participant} unitType={UnitType.infantry} onUpdate={onChange} />
      <UnitInput participant={participant} unitType={UnitType.pds} onUpdate={onChange} />
    </StyledDiv>
  )
}

interface UnitInputProps {
  participant: Participant
  unitType: UnitType
  onUpdate: (participant: Participant) => void
}

function UnitInput({ participant, unitType, onUpdate }: UnitInputProps) {
  const [val, setVal] = useState<string>(participant.units[unitType].toString())

  const unitUpgrade = getUnitUpgrade(participant.race, unitType)

  const onChange = (e: ChangeEvent<HTMLInputElement>) => {
    setVal(e.target.value)
    let newVal
    if (e.target.value === '') {
      newVal = 0
    } else {
      newVal = parseInt(e.target.value, 10)
    }
    if (Number.isFinite(newVal)) {
      updateUnitCount(newVal)
    }
  }

  const updateUnitCount = (newVal: number) => {
    const newParticipant: Participant = {
      ...participant,
      units: {
        ...participant.units,
        [unitType]: newVal,
      },
    }
    onUpdate(newParticipant)
  }

  const hasUpgrade = participant.unitUpgrades[unitType] ?? false

  return (
    <div style={{ display: 'flex' }}>
      <input
        type="checkbox"
        disabled={!unitUpgrade}
        checked={hasUpgrade}
        onChange={() => {
          const newParticipant: Participant = {
            ...participant,
            unitUpgrades: {
              ...participant.unitUpgrades,
              [unitType]: !hasUpgrade,
            },
          }
          onUpdate(newParticipant)
        }}
      />
      <input
        type="number"
        min="0"
        max="100"
        value={val}
        // remember: input with type number dont trigger onChange on invalid input
        onChange={onChange}
        onBlur={() => {
          const newVal = parseInt(val, 10)
          if (!Number.isFinite(newVal)) {
            setVal('0')
            updateUnitCount(0)
          }
        }}
      />
    </div>
  )
}

interface OptionsProps {
  attacker: Participant
  attackerOnChange: (participant: Participant) => void
  defender: Participant
  defenderOnChange: (participant: Participant) => void
}

const OptionsDiv = styled.div`
  display: flex;
  > * {
    flex: 1 0 0;
  }
`

function OptionsView({ attacker, attackerOnChange, defender, defenderOnChange }: OptionsProps) {
  const battleEffects = getAllBattleEffects()
  const relevantBattleEffects = battleEffects.filter((effect) => effect.type !== 'unit-upgrade')
  // .filter((effect) => {
  //   return isBattleEffectRelevantForSome(effect, [attacker, defender])
  // })

  return (
    <div>
      <OptionsDiv>
        {getDirectHitCheckbox(attacker, attackerOnChange)}
        <span>Risk direct hit</span>
        {getDirectHitCheckbox(defender, defenderOnChange)}
      </OptionsDiv>
      {relevantBattleEffects.map((effect) => {
        const attackerView = getBattleEffectCheckbox(effect, attacker, attackerOnChange)
        const defenderView = getBattleEffectCheckbox(effect, defender, defenderOnChange)

        return (
          <OptionsDiv key={effect.name}>
            {attackerView}
            <span>{effect.name}</span>
            {defenderView}
          </OptionsDiv>
        )
      })}
    </div>
  )
}

const getDirectHitCheckbox = (
  participant: Participant,
  onChange: (participant: Participant) => void,
) => {
  return (
    <input
      type="checkbox"
      checked={participant.riskDirectHit}
      onChange={() => {
        const newParticipant: Participant = {
          ...participant,
          riskDirectHit: !participant.riskDirectHit,
        }
        onChange(newParticipant)
      }}
    />
  )
}

const getBattleEffectCheckbox = (
  effect: BattleEffect,
  participant: Participant,
  onChange: (participant: Participant) => void,
) => {
  return (
    <input
      type="checkbox"
      name="scales"
      checked={participant.battleEffects.some((e) => e.name === effect.name)}
      onChange={(e) => {
        if (e.target.checked) {
          const newParticipant: Participant = {
            ...participant,
            battleEffects: [...participant.battleEffects, effect],
          }
          onChange(newParticipant)
        } else {
          const newParticipant: Participant = {
            ...participant,
            battleEffects: participant.battleEffects.filter((e) => e.name !== effect.name),
          }
          onChange(newParticipant)
        }
      }}
      disabled={!isBattleEffectRelevant(effect, participant)}
    />
  )
}
